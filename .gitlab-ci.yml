stages: [validate, plan, apply]

# ----------------------------
# Base Terraform
# ----------------------------
.tf_base:
  image: hashicorp/terraform:1.7.5
  variables:
    TF_IN_AUTOMATION: "true"
    TF_INPUT: "false"
  before_script:
    # Auth backend HTTP GitLab (Basic Auth)
    - export TF_HTTP_USERNAME="gitlab-ci-token"
    - export TF_HTTP_PASSWORD="$CI_JOB_TOKEN"
    - terraform --version
    # On aura besoin de git pour dÃ©tecter les fichiers modifiÃ©s
    - apk add --no-cache git >/dev/null 2>&1 || true
    # RÃ©cup un peu dâ€™historique pour diff propre en MR
    - git fetch --no-tags origin "+refs/heads/*:refs/remotes/origin/*" >/dev/null 2>&1 || true

# ----------------------------
# VALIDATE (code only)
# ----------------------------
validate:
  extends: .tf_base
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - stacks/**/*
        - modules/**/*
        - .gitlab-ci.yml
  script:
    - terraform -chdir=stacks/hub fmt -check
    - terraform -chdir=stacks/hub validate
    - terraform -chdir=stacks/workspace fmt -check
    - terraform -chdir=stacks/workspace validate

# ----------------------------
# Helpers (inline bash)
# ----------------------------
.default_detect_and_set_paths: &detect_and_set_paths
  - |
    set -e
    # Variables dÃ©rivÃ©es selon ENV/STACK de la matrix
    export STACK_DIR="stacks/${STACK}"
    export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"

    # DÃ©tecte si des fichiers pertinents ont changÃ© pour *ce* couple {ENV,STACK}
    # MR: diff entre la target branch et le commit courant
    # Branch pipeline: diff avec le commit prÃ©cÃ©dent
    if [[ "$CI_PIPELINE_SOURCE" == "merge_request_event" && -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]]; then
      BASE_SHA="$(git rev-parse "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}")"
      HEAD_SHA="$CI_COMMIT_SHA"
    else
      BASE_SHA="${CI_COMMIT_BEFORE_SHA:-}"
      HEAD_SHA="$CI_COMMIT_SHA"
      # si pas de base connue (premier commit), on considÃ¨re qu'il y a des changements
      [[ -z "$BASE_SHA" ]] && BASE_SHA="$HEAD_SHA^" || true
    fi

    # Patterns propres au stack + patterns communs
    PATTERN="^(stacks/${STACK}/|envs/${ENV}/${STACK}/|modules/|.gitlab-ci.yml$)"
    CHANGED=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep -E "$PATTERN" || true)

    if [[ -z "$CHANGED" ]]; then
      echo "ðŸŸ¡ Aucun changement pertinent pour ${ENV}/${STACK}. Job skippÃ©."
      echo "CHANGED=0" >> $CI_PROJECT_DIR/.env_out
      exit 0
    else
      echo "âœ… Changements dÃ©tectÃ©s pour ${ENV}/${STACK}:"
      echo "$CHANGED" | sed 's/^/ - /'
      echo "CHANGED=1" >> $CI_PROJECT_DIR/.env_out
    fi

# ----------------------------
# PLAN via matrix (stg/prd Ã— hub/workspace)
# ----------------------------
plan_matrix:
  extends: .tf_base
  stage: plan
  parallel:
    matrix:
      - ENV: ["stg", "prd"]
        STACK: ["hub", "workspace"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        # Si lâ€™un quelconque de ces chemins change, on crÃ©e les jobs matrix,
        # puis chaque job vÃ©rifiera sâ€™il est concernÃ© (guard ci-dessus).
        - stacks/**/*
        - modules/**/*
        - envs/**/*
        - .gitlab-ci.yml
  script:
    - *detect_and_set_paths
    # Recharger le flag CHANGED (si le job n'est pas dÃ©jÃ  sorti plus haut)
    - source $CI_PROJECT_DIR/.env_out || true
    - '[[ "${CHANGED:-1}" == "0" ]] && exit 0'
    # Plan
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" plan -no-color -out=tfplan -var-file="$TFVARS_FILE"
    - terraform -chdir="$STACK_DIR" show -no-color tfplan > tfplan.txt
  artifacts:
    when: always
    paths:
      - ${STACK_DIR}/tfplan
      - ${STACK_DIR}/tfplan.txt
    expire_in: 1 day

# ----------------------------
# APPLY STAGING (ordre garanti hub -> workspace)
# ----------------------------
.apply_stg_base:
  extends: .tf_base
  stage: apply
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - stacks/**/*
        - modules/**/*
        - envs/stg/**/*

apply_stg_hub:
  extends: .apply_stg_base
  variables:
    ENV: "stg"
    STACK: "hub"
  resource_group: "stg-hub"
  script:
    - *detect_and_set_paths
    - source $CI_PROJECT_DIR/.env_out || true
    - '[[ "${CHANGED:-1}" == "0" ]] && { echo "Skip apply stg/hub"; exit 0; }'
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

apply_stg_workspace:
  extends: .apply_stg_base
  needs: [ "apply_stg_hub" ]   # impose l'ordre
  variables:
    ENV: "stg"
    STACK: "workspace"
  resource_group: "stg-workspace"
  script:
    - *detect_and_set_paths
    - source $CI_PROJECT_DIR/.env_out || true
    - '[[ "${CHANGED:-1}" == "0" ]] && { echo "Skip apply stg/workspace"; exit 0; }'
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

# ----------------------------
# APPLY PROD (manuel + protÃ©gÃ© ; ordre hub -> workspace)
# ----------------------------
.apply_prd_base:
  extends: .tf_base
  stage: apply
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
      changes:
        - stacks/**/*
        - modules/**/*
        - envs/prd/**/*

apply_prd_hub:
  extends: .apply_prd_base
  variables:
    ENV: "prd"
    STACK: "hub"
  resource_group: "prd-hub"
  environment:
    name: prd-hub
  script:
    - *detect_and_set_paths
    - source $CI_PROJECT_DIR/.env_out || true
    - '[[ "${CHANGED:-1}" == "0" ]] && { echo "Skip apply prd/hub"; exit 0; }'
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

apply_prd_workspace:
  extends: .apply_prd_base
  needs: [ "apply_prd_hub" ]
  variables:
    ENV: "prd"
    STACK: "workspace"
  resource_group: "prd-workspace"
  environment:
    name: prd-workspace
  script:
    - *detect_and_set_paths
    - source $CI_PROJECT_DIR/.env_out || true
    - '[[ "${CHANGED:-1}" == "0" ]] && { echo "Skip apply prd/workspace"; exit 0; }'
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"
