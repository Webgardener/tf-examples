stages: [validate, plan, apply]

# ---------------------------------
# Base Terraform (HTTP backend GitLab)
# ---------------------------------
.tf_base:
  image: hashicorp/terraform:1.7.5
  variables:
    TF_IN_AUTOMATION: "true"
    TF_INPUT: "false"
  before_script:
    - export TF_HTTP_USERNAME="gitlab-ci-token"
    - export TF_HTTP_PASSWORD="$CI_JOB_TOKEN"
    - terraform --version

# ---------------------------------
# VALIDATE (si code Terraform/modules changent)
# ---------------------------------
validate:
  extends: .tf_base
  stage: validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - stacks/**/*
        - modules/**/*
        - .gitlab-ci.yml
  script:
    - terraform -chdir=stacks/hub fmt -check
    - terraform -chdir=stacks/hub validate
    - terraform -chdir=stacks/workspace fmt -check
    - terraform -chdir=stacks/workspace validate

# ---------------------------------
# PLAN via matrix (stg/prd × hub/workspace)
# Chaque job enfant n'est déclenché que si *ses* chemins changent
# ---------------------------------
plan_matrix:
  extends: .tf_base
  stage: plan
  parallel:
    matrix:
      - ENV: ["stg", "prd"]
        STACK: ["hub", "workspace"]
  rules:
    # STG / HUB
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ENV == "stg" && $STACK == "hub"'
      changes:
        - stacks/hub/**/*
        - envs/stg/hub/**/*
        - modules/**/*
        - .gitlab-ci.yml
    # STG / WORKSPACE
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ENV == "stg" && $STACK == "workspace"'
      changes:
        - stacks/workspace/**/*
        - envs/stg/workspace/**/*
        - modules/**/*
        - .gitlab-ci.yml
    # PRD / HUB
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ENV == "prd" && $STACK == "hub"'
      changes:
        - stacks/hub/**/*
        - envs/prd/hub/**/*
        - modules/**/*
        - .gitlab-ci.yml
    # PRD / WORKSPACE
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ENV == "prd" && $STACK == "workspace"'
      changes:
        - stacks/workspace/**/*
        - envs/prd/workspace/**/*
        - modules/**/*
        - .gitlab-ci.yml
    # Fallback: rien d'autre ne doit lancer ce job matrix
    - when: never
  script:
    # Paramétrage dérivé de la matrix
    - export STACK_DIR="stacks/${STACK}"
    - export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    - export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"

    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" plan -no-color -out=tfplan -var-file="$TFVARS_FILE"
    - terraform -chdir="$STACK_DIR" show -no-color tfplan > tfplan.txt
  artifacts:
    when: always
    # On évite la substitution complexe dans `paths`; on collecte ce que chaque enfant a produit
    paths:
      - stacks/**/tfplan
      - stacks/**/tfplan.txt
    expire_in: 1 day

# ---------------------------------
# APPLY STAGING (ordre garanti hub -> workspace)
# ---------------------------------
.apply_stg_base:
  extends: .tf_base
  stage: apply
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - stacks/**/*
        - modules/**/*
        - envs/stg/**/*

apply_stg_hub:
  extends: .apply_stg_base
  variables:
    ENV: "stg"
    STACK: "hub"
  resource_group: "stg-hub"
  script:
    - export STACK_DIR="stacks/${STACK}"
    - export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    - export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

apply_stg_workspace:
  extends: .apply_stg_base
  needs: [ "apply_stg_hub" ]     # impose hub -> workspace
  variables:
    ENV: "stg"
    STACK: "workspace"
  resource_group: "stg-workspace"
  script:
    - export STACK_DIR="stacks/${STACK}"
    - export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    - export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

# ---------------------------------
# APPLY PROD (manuel + protégé ; ordre hub -> workspace)
# ---------------------------------
.apply_prd_base:
  extends: .tf_base
  stage: apply
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
      changes:
        - stacks/**/*
        - modules/**/*
        - envs/prd/**/*

apply_prd_hub:
  extends: .apply_prd_base
  variables:
    ENV: "prd"
    STACK: "hub"
  resource_group: "prd-hub"
  environment:
    name: prd-hub
  script:
    - export STACK_DIR="stacks/${STACK}"
    - export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    - export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"

apply_prd_workspace:
  extends: .apply_prd_base
  needs: [ "apply_prd_hub" ]
  variables:
    ENV: "prd"
    STACK: "workspace"
  resource_group: "prd-workspace"
  environment:
    name: prd-workspace
  script:
    - export STACK_DIR="stacks/${STACK}"
    - export BACKEND_FILE="../../envs/${ENV}/${STACK}/backend.hcl"
    - export TFVARS_FILE="../../envs/${ENV}/${STACK}/terraform.tfvars"
    - terraform -chdir="$STACK_DIR" init -reconfigure -backend-config="$BACKEND_FILE"
    - terraform -chdir="$STACK_DIR" apply -no-color -auto-approve -var-file="$TFVARS_FILE"
